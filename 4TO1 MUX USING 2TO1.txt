//2*1 MUX DESIGN CODE
module mux2to1(
    input a,b,
    input s,
    output y
    );
and(w1,a,!s);
and(w2,b,s);
or(y,w1,w2);    
endmodule



//TEST BENCH
module mux2to1_tb;
reg a,b,s;
wire y;
mux2to1 uut(.a(a),.b(b),.s(s),.y(y));
initial begin
a=1;b=0;s=0;#100;
a=0;b=1;s=1;#100;
end
endmodule



//4*1 DESIGN CODE
module mux4to1using2to1(
    input a,b,c,d,
    input s0,s1,
    output y
    );
mux2to1 m1(.a(a),.b(b),.s(s0),.y(w1));
mux2to1 m2(.a(c),.b(d),.s(s0),.y(w2));
mux2to1 m3(.a(w2),.b(w1),.s(s1),.y(y));  
endmodule



//TEST BENCH
module mux4to1using2to1_tb;
reg a,b,c,d;
reg s0,s1;
wire y;
mux4to1using2to1 uut(.a(a),.b(b),.c(c),.d(d),.s0(s0),.s1(s1),.y(y));
initial begin
a=1;b=0;c=0;d=0;s0=0;s1=0;#100;
a=0;b=0;c=1;d=0;s0=0;s1=1;#100;
a=0;b=1;c=0;d=0;s0=1;s1=0;#100;
a=0;b=0;c=0;d=1;s0=1;s1=1;#100;
end
endmodule
